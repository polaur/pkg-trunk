/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p resourceslinking_interface /home/pb/Public/kf5rc/Tier 3/kactivities-stats/src/kactivities-stats-v5.45.0-rc1/src/common/dbus/org.kde.ActivityManager.ResourcesLinking.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef RESOURCESLINKING_INTERFACE_H
#define RESOURCESLINKING_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.ActivityManager.ResourcesLinking
 */
class OrgKdeActivityManagerResourcesLinkingInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.ActivityManager.ResourcesLinking"; }

public:
    OrgKdeActivityManagerResourcesLinkingInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeActivityManagerResourcesLinkingInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> IsResourceLinkedToActivity(const QString &agent, const QString &resource)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agent) << QVariant::fromValue(resource);
        return asyncCallWithArgumentList(QStringLiteral("IsResourceLinkedToActivity"), argumentList);
    }

    inline QDBusPendingReply<bool> IsResourceLinkedToActivity(const QString &agent, const QString &resource, const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agent) << QVariant::fromValue(resource) << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("IsResourceLinkedToActivity"), argumentList);
    }

    inline QDBusPendingReply<> LinkResourceToActivity(const QString &agent, const QString &resource)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agent) << QVariant::fromValue(resource);
        return asyncCallWithArgumentList(QStringLiteral("LinkResourceToActivity"), argumentList);
    }

    inline QDBusPendingReply<> LinkResourceToActivity(const QString &agent, const QString &resource, const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agent) << QVariant::fromValue(resource) << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("LinkResourceToActivity"), argumentList);
    }

    inline QDBusPendingReply<> UnlinkResourceFromActivity(const QString &agent, const QString &resource)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agent) << QVariant::fromValue(resource);
        return asyncCallWithArgumentList(QStringLiteral("UnlinkResourceFromActivity"), argumentList);
    }

    inline QDBusPendingReply<> UnlinkResourceFromActivity(const QString &agent, const QString &resource, const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agent) << QVariant::fromValue(resource) << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("UnlinkResourceFromActivity"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ResourceLinkedToActivity(const QString &agent, const QString &resource, const QString &activity);
    void ResourceUnlinkedFromActivity(const QString &agent, const QString &resource, const QString &activity);
};

namespace org {
  namespace kde {
    namespace ActivityManager {
      typedef ::OrgKdeActivityManagerResourcesLinkingInterface ResourcesLinking;
    }
  }
}
#endif
