# vim: set ts=2 sw=2 et:
### Arch Linux PKGBUILD maintainer:
# Maintainer: Morten Linderud <foxboron@archlinux.org>
### CachyOS PKGBUILD maintainers:
# Maintainer: Vladislav Nepogodin (vnepogodin) <nepogodin.vlad@gmail.com>
# Maintainer: Piotr Gorski <piotrgorski@cachyos.org>
# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>

_staging=true
pkgname=pacman
pkgver=6.1.0
_pkgver=6.1.0
_sqlitever=$(curl -s 'https://archlinux.org/packages/search/json/?name=sqlite' | grep -oP '"pkgver":\s*"\K[^"]+' | head -n 1 | awk -F. '{
    printf "%d%02d%02d", $1, $2, $3;
    if (NF == 4) { printf "%02d", $4 }
    else { printf "00" }
}')

pkgrel=3.8
pkgdesc="A library-based package manager with dependency support. CachyOS fork."
arch=('x86_64')
url="https://www.archlinux.org/pacman/"
license=('GPL-2.0-or-later')
depends=('bash' 'glibc' 'libarchive' 'curl' 'gpgme' 'pacman-mirrorlist'
         'gettext' 'gawk' 'coreutils' 'gnupg' 'grep' 'debugedit')
makedepends=('meson' 'asciidoc' 'doxygen' 'git' 'curl' 'unzip'
             'cmake' 'rust' 'clang' 'llvm' 'tcl')
checkdepends=('python' 'fakechroot')
optdepends=('perl-locale-gettext: translation support in makepkg-template')
provides=('libalpm.so')
backup=(etc/pacman.conf
        etc/makepkg.conf)
options=('strip') #'!lto' -- should we put no lto here??
#validpgpkeys=('6645B0A8C7005E78DB1D7864F99FFE0FEAE999BD'  # Allan McRae <allan@archlinux.org>
#              'B8151B117037781095514CA7BBDFFC92306B1121') # Andrew Gregory (pacman) <andrew@archlinux.org>
_commit="2f3dda35d764e4a5cbbc66cb558e47221313e0c0"
if $_staging; then
    _commit="dd5398e7322713a72f702bbbbb41af819a0b749d"
fi
source=(
#       https://sources.archlinux.org/other/pacman/$pkgname-$_pkgver.tar.xz{,.sig}
        git+https://github.com/CachyOS/pacman.git#commit=${_commit}
        "pacman.conf"
        "makepkg.conf"
        static_sqlite.patch
        "https://www.sqlite.org/2024/sqlite-src-${_sqlitever}.zip"
        disable-always-stale.patch
        )
sha256sums=('de79610504ee48a95f067349a82611b58ef461c022f6a1c237ed3ee7e105bd19'
            '47f4ba578b1a6a3291cb65a6f60ab8c4871ae45bbe93da308a595a447ed9ad9d'
            'adf56ce97b0e0639804ee32123eedefb2de6f65ac9a9cc1f7566ed768f4c16c1'
            'bdd8fb13c1cd8606f41347bc1897e261031ac80b33c772d310f417064332f646'
            '070362109beb6899f65797571b98b8824c8f437f5b2926f88ee068d98ef368ec'
            '11e0078c5ac7cdafa625957a9da982989efe19719e4973cd77f28dc5780dccd9')

#if $_staging; then
    #source+=(https://raw.githubusercontent.com/vnepogodin/my-patches/develop/pacman/0001-libalpm-parallel-signature-check.patch)
#fi

prepare() {
  cd "${pkgname}"
  # we backport way too often in pacman
  # lets at least make it more convenient
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  export AR=llvm-ar
  export CC=clang
  export CXX=clang++
  export NM=llvm-nm
  export RANLIB=llvm-ranlib

  #if ! rustc --version | grep stable >/dev/null 2>&1; then
  #  echo "Installing stable compilerâ€¦"
  #  rustup toolchain install stable
  #  rustup default stable
  #fi

  local _saved_cflags="${CFLAGS}"
  local _saved_cppflags="${CPPFLAGS}"
  local _saved_cxxflags="${CXXFLAGS}"

  # this uses malloc_usable_size, which is incompatible with fortification level 3
  export CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
  export CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"

  export CPPFLAGS="$CPPFLAGS \
        -DSQLITE_ENABLE_COLUMN_METADATA=1 \
        -DSQLITE_ENABLE_UNLOCK_NOTIFY \
        -DSQLITE_ENABLE_DBSTAT_VTAB=1 \
        -DSQLITE_ENABLE_FTS3_TOKENIZER=1 \
        -DSQLITE_ENABLE_FTS3_PARENTHESIS \
        -DSQLITE_SECURE_DELETE \
        -DSQLITE_ENABLE_STMTVTAB \
        -DSQLITE_ENABLE_STAT4 \
        -DSQLITE_MAX_VARIABLE_NUMBER=250000 \
        -DSQLITE_MAX_EXPR_DEPTH=10000 \
        -DSQLITE_ENABLE_MATH_FUNCTIONS"

  cd "sqlite-src-${_sqlitever}"
  ./configure --prefix="${srcdir}/${pkgname}"/tmp_sqlite  \
        --disable-shared \
        --enable-fts3 \
        --enable-fts4 \
        --enable-fts5 \
        --enable-rtree \
        --disable-tcl \
        --with-pic \
        --enable-fast-install

  sed -i -e 's/ -shared / -Wl,-O1,--as-needed\0/g' libtool
  make
  make install

  export CFLAGS="${_saved_cflags}"
  export CPPFLAGS="${_saved_cppflags}"
  export CXXFLAGS="${_saved_cxxflags}"

  export CFLAGS+=" -fno-semantic-interposition -flto=thin"
  export CXXFLAGS+=" -fno-semantic-interposition -flto=thin"
  export RUSTFLAGS+=" -Cembed-bitcode -Clinker-plugin-lto -Clinker=clang -C link-arg=-flto=thin"
  export LDFLAGS+=" -lm"

  cd ..

  cd "${pkgname}"

  meson --prefix=/usr \
        --buildtype=plain \
        -Ddoc=enabled \
        -Ddoxygen=enabled \
        -Dscriptlet-shell=/usr/bin/bash \
        -Dldconfig=/usr/bin/ldconfig \
        build

  meson compile -C build
}

check() {
  cd "${pkgname}"

  export AR=llvm-ar
  export CC=clang
  export CXX=clang++
  export NM=llvm-nm
  export RANLIB=llvm-ranlib

  export CFLAGS+=" -fno-semantic-interposition -flto=thin"
  export CXXFLAGS+=" -fno-semantic-interposition -flto=thin"
  export RUSTFLAGS+=" -Cembed-bitcode -Clinker-plugin-lto -Clinker=clang -C link-arg=-flto=thin"

  meson test -C build

  cd build
  ninja scripts/repo-add/src/repo-add-test
}

package() {
  cd "${pkgname}"

  export AR=llvm-ar
  export CC=clang
  export CXX=clang++
  export NM=llvm-nm
  export RANLIB=llvm-ranlib

  export CFLAGS+=" -fno-semantic-interposition -flto=thin"
  export CXXFLAGS+=" -fno-semantic-interposition -flto=thin"
  export RUSTFLAGS+=" -Cembed-bitcode -Clinker-plugin-lto -Clinker=clang -C link-arg=-flto=thin"

  DESTDIR="$pkgdir" meson install -C build

  # install Arch specific stuff
  install -dm755 "$pkgdir/etc"
  install -m644 "$srcdir/pacman.conf" "$pkgdir/etc"
  install -m644 "$srcdir/makepkg.conf" "$pkgdir/etc"

  local wantsdir="$pkgdir/usr/lib/systemd/system/sockets.target.wants"
  install -dm755 "$wantsdir"

  local unit
  for unit in dirmngr gpg-agent gpg-agent-{browser,extra,ssh} keyboxd; do
    ln -s "../${unit}@.socket" "$wantsdir/${unit}@etc-pacman.d-gnupg.socket"
  done
}
